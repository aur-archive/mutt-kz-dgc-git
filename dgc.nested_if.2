Adds nestable if-else sequences to format strings.

Convetional if-else expressions (%?x?true&false?) are not nestable.  An
earlier "deepif" patch allowed nesting by means of backslash-escaping
inner '?' characters within the 'true' and 'false' expressions, but this
got messy fast with mutt rc file quoting taken into account.  It would
be cleaner if there were left-right-balanced symbols for 'containing'
the expression.

This patch steals the '%<...>' notation and uses it to implement
nestable conditionals. '%<...>' is conventionally used to format current
local time, but that's not really very useful since mutt has no means
of refreshing the screen periodically.  Even in the status bar a current
local time could be rather out of date.

Notation, then, is: %<x?true&false>, where 'x' is the test character
(analogous to '%x').  Now you can use %<x?%<y?%<z?xyz&xy>&x>&none> to
get a triple-depth expression with no backslashing.

diff -r 9ec537f57777 muttlib.c
--- a/muttlib.c	Mon Jan 03 13:24:27 2011 -0600
+++ b/muttlib.c	Mon Jan 03 13:24:32 2011 -0600
@@ -1238,6 +1238,20 @@
 
       if (*src == '?')
       {
+	/* hack: patch %<x?if-expr&else-expr> notation into original */
+	/* %<x?y&z> is equivalent to %?x?y&z?, but is nestable */
+	char *p = (char *)src;
+	*p = '<';
+	for ( ; *p && *p != '?'; p++);
+	if (*p == '?')
+	  p++;
+	for ( ; *p && *p != '?'; p++);
+	if (*p == '?')
+	  *p = '>';
+      }
+
+      if (*src == '<')
+      {
 	flags |= M_FORMAT_OPTIONAL;
 	ch = *(++src); /* save the character to switch on */
 	src++;
@@ -1274,6 +1288,8 @@
 
       if (flags & M_FORMAT_OPTIONAL)
       {
+	int lrbalance;
+
         if (*src != '?')
           break; /* bad format */
         src++;
@@ -1281,8 +1297,22 @@
         /* eat the `if' part of the string */
         cp = ifstring;
 	count = 0;
-        while (count < sizeof (ifstring) && *src && *src != '?' && *src != '&')
+	lrbalance = 1;
+        while (lrbalance > 0 && count < sizeof (ifstring) && *src)
 	{
+	  if (*src == '\\')
+	  {
+	    src++;
+	    *cp++ = *src++;
+	  }
+	  else if (src[0] == '%' && src[1] == '<')
+	    lrbalance++;
+	  else if (src[0] == '>')
+	    lrbalance--;
+	  if (lrbalance == 0)
+	    break;
+	  if (lrbalance == 1 && src[0] == '&')
+	    break;
           *cp++ = *src++;
 	  count++;
 	}
@@ -1293,9 +1323,22 @@
 	  src++; /* skip the & */
 	cp = elsestring;
 	count = 0;
-	while (count < sizeof (elsestring) && *src && *src != '?')
+	while (lrbalance > 0 && count < sizeof (elsestring) && *src)
 	{
-	  *cp++ = *src++;
+	  if (*src == '\\')
+	  {
+	    src++;
+	    *cp++ = *src++;
+	  }
+	  else if (src[0] == '%' && src[1] == '<')
+	    lrbalance++;
+	  else if (src[0] == '>')
+	    lrbalance--;
+	  if (lrbalance == 0)
+	    break;
+	  if (lrbalance == 1 && src[0] == '&')
+	    break;
+          *cp++ = *src++;
 	  count++;
 	}
 	*cp = 0;
@@ -1303,7 +1346,7 @@
 	if (!*src)
 	  break; /* bad format */
 
-        src++; /* move past the trailing `?' */
+        src++; /* move past the trailing `>' (formerly '?') */
       }
 
       /* handle generic cases first */
